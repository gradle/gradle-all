import org.eclipse.jgit.api.CloneCommand

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath "org.eclipse.jgit:org.eclipse.jgit:4.8.0.201706111038-r"
    }
}

class Repo {
    final String name
    final String url
    
    Repo(String name, String url) {
        this.name = name
        this.url = url
    }
}

def repos = [
    new Repo("gradle", "git@github.com:gradle/gradle.git"),
    // internal compiler error when included
//    new Repo("kotlin-dsl", "git@github.com:gradle/kotlin-dsl.git"),
    new Repo("using-an-existing-gradle-build", "git@github.com:gradle-guides/using-an-existing-gradle-build.git"),
    new Repo("creating-new-gradle-builds", "git@github.com:gradle-guides/creating-new-gradle-builds.git"),
    // has incorrect root project name in settings.gradle
//    new Repo("creating-multi-project-builds", "git@github.com:gradle-guides/creating-multi-project-builds.git"),
    new Repo("creating-composite-builds", "git@github.com:gradle-guides/creating-composite-builds.git"),
    new Repo("building-java-libraries", "git@github.com:gradle-guides/building-java-libraries.git"),
    new Repo("building-scala-libraries", "git@github.com:gradle-guides/building-scala-libraries.git"),
    new Repo("writing-gradle-plugins", "git@github.com:gradle-guides/writing-gradle-plugins.git"),
    // has incorrect root project name in settings.gradle
    new Repo("writing-gradle-tasks", "git@github.com:gradle-guides/writing-gradle-tasks.git"),
    new Repo("publishing-plugins-to-gradle-plugin-portal", "git@github.com:gradle-guides/publishing-plugins-to-gradle-plugin-portal.git"),
    new Repo("implementing-gradle-plugins", "git@github.com:gradle-guides/implementing-gradle-plugins.git"),
    new Repo("designing-gradle-plugins", "git@github.com:gradle-guides/designing-gradle-plugins.git"),
    new Repo("gradle-site-plugin", "git@github.com:gradle-guides/gradle-site-plugin.git"),
    // root project name is taken by 'writing-gradle-tasks'
//    new Repo("gradle-guides-plugin", "git@github.com:gradle-guides/gradle-guides-plugin.git")
]

repos.each { r ->
    def repoDir = file("repos/$r.name")
    if (!repoDir.exists()) {
        println "Checking out $r.url"
        repoDir.mkdirs()
        def command = new CloneCommand()
        command.directory = repoDir
        command.uri = r.url
        command.call()
        def settingsFile = new File(repoDir, "settings.gradle")
        if (!settingsFile.exists()) {
            settingsFile.text = "// empty placeholder"
        }
    }
    includeBuild(repoDir)
}
